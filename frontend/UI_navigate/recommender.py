import streamlit as st
import pandas as pd
import requests
from dotenv import load_dotenv
from streamlit_extras.bottom_container import bottom
import os
import json
import re

load_dotenv(dotenv_path="./endpoints.env")

st.title("ü§ñ G·ª£i √Ω s·∫£n ph·∫©m cho kh√°ch h√†ng")
st.markdown("Theo d√µi ho·∫°t ƒë·ªông t√†i ch√≠nh v√† nh·∫≠n g·ª£i √Ω s·∫£n ph·∫©m ph√π h·ª£p.")

# --- User Selection ---
st.subheader("üë§ Ch·ªçn User")
users = [
    "ad089c26-f733-4535-9901-bfbf827272b5",
    "1fce992a-435c-4363-917c-aed958213b43",
    "26b6cb73-8bb6-4bf5-a7a0-c932721e1df9",
    "51c75821-5a6e-4e29-948b-2ecfdc9cc12f",
    "3d29ae48-1838-44ba-ae30-8a8c4275d138",
    "6eb9c9f6-5fda-44af-a732-b838ab15e8e8",
    "e0da2e4f-4c18-4d59-8d77-3b608e4fa3ff"
]
selected_user = st.selectbox("Ch·ªçn t·ª´ danh s√°ch:", users)
custom_user = st.text_input("Ho·∫∑c nh·∫≠p User ID kh√°c:")
selected_user = custom_user if custom_user else selected_user

st.markdown(f"**User ƒë√£ ch·ªçn:** `{selected_user}`")

# --- API Calls ---
def fetch_customer_segment(user_id):
    API_URL = os.getenv("SEGMENT_API", "http://localhost:8000/customer_segment/")
    response = requests.post(API_URL, json={"user_id": user_id})
    return response.json() if response.status_code == 200 else None

def fetch_explanation_for_recommendation(data):
    API_URL = os.getenv("EXPLAIN_API", "http://localhost:8000/get_explain_for_eight_recommendation/")
    response = requests.post(API_URL, json={"data": f"""{data}"""})
    return response.json() if response.status_code == 200 else None

# --- Customer Segment Info ---
segment_data = fetch_customer_segment(selected_user)

if segment_data:
    st.markdown("## üß¨ Ph√¢n kh√∫c kh√°ch h√†ng")
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("### üë§ Th√¥ng tin kh√°ch h√†ng")
        info = segment_data.get("customer_info", {})
        st.write({
            "Tu·ªïi": info.get("age"),
            "T√¨nh tr·∫°ng h√¥n nh√¢n": info.get("marital_status"),
            "Ngh·ªÅ nghi·ªáp": info.get("occupation"),
            "S·ªë ng∆∞·ªùi trong h·ªô": info.get("household_size"),
            "Thu nh·∫≠p th√°ng ($)": round(info.get("monthly_salary", 0), 2),
            "Thu nh·∫≠p ph√¢n kh√∫c": info.get("income_tier"),
        })

    with col2:
        st.markdown("### üìä Th·ªëng k√™ ph√¢n kh√∫c")
        stats = segment_data.get("segment_stats", {})
        demo = stats.get("demographics", {})
        st.write({
            "Tu·ªïi TB": round(demo.get("avg_age", 0), 2),
            "H√¥n nh√¢n ph·ªï bi·∫øn": demo.get("common_marital_status"),
            "Ngh·ªÅ ph·ªï bi·∫øn": demo.get("common_occupation"),
            "H·ªô trung b√¨nh": round(demo.get("avg_household_size", 0), 2),
        })

    # --- Top 3 Recommended Products ---
    st.markdown("## üéØ Top 3 G·ª£i √Ω s·∫£n ph·∫©m")
    recommendations = segment_data.get("product_recommendations", [])
    top3 = sorted(recommendations, key=lambda x: x["reward_value"], reverse=True)[:3]

    for i, product in enumerate(top3, 1):
        st.markdown(f"""
        <div style="border:1px solid #ccc;padding:15px;border-radius:10px;margin-bottom:10px;background-color:#f9f9f9">
            <b>#{i}. {product['category']}</b><br>
            <ul>
                <li><b>Tier:</b> {product['tier']}</li>
                <li><b>Lo·∫°i ph·∫ßn th∆∞·ªüng:</b> {product['reward_type']}</li>
                <li><b>Gi√° tr·ªã ph·∫ßn th∆∞·ªüng:</b> {product['reward_value']}%</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

# --- Explanation Section ---
st.markdown("## üìñ Gi·∫£i th√≠ch g·ª£i √Ω s·∫£n ph·∫©m")
explanation = fetch_explanation_for_recommendation(segment_data)
if explanation:
    # N·∫øu raw l√† chu·ªói, lo·∫°i b·ªè markdown fence v√† parse JSON
    if isinstance(explanation, str):
        # Lo·∫°i b·ªè ```json v√† ``` n·∫øu c√≥
        # D√πng regex ƒë·ªÉ l·∫•y ph·∫ßn gi·ªØa hai d·∫•u ```
        m = re.search(r"```json\s*(\[\s*[\s\S]*?\])\s*```", explanation)
        json_str = m.group(1) if m else explanation.strip("` \n")
        try:
            data = json.loads(json_str)
            st.json(data)
        except json.JSONDecodeError as e:
            st.error(f"L·ªói ph√¢n t√≠ch JSON: {e}")
            # Hi·ªán raw g·ªëc ƒë·ªÉ debug
            st.write(explanation)
    else:
        # N·∫øu ƒë√£ l√† object (list/dict), render tr·ª±c ti·∫øp
        st.json(explanation)
else:
    st.warning("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu gi·∫£i th√≠ch.")
