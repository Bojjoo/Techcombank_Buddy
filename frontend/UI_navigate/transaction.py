import streamlit as st
import pandas as pd
import requests
from datetime import datetime, timedelta

st.title("üìà Giao D·ªãch G·∫ßn ƒê√¢y")
st.markdown("Theo d√µi ho·∫°t ƒë·ªông t√†i ch√≠nh c·ªßa b·∫°n m·ªôt c√°ch r√µ r√†ng v√† tr·ª±c quan.")

st.subheader("üë§ Ch·ªçn User")
users = ["User 1", "User 2", "User 3", "User 4", "User 5"]  # Danh s√°ch users
selected_user = st.selectbox("Ch·ªçn user:", users)

# G·ªçi API t·ª± ƒë·ªông khi user thay ƒë·ªïi
if selected_user:
    try:
        # G·ªçi API backend
        response = requests.post("http://localhost:8000/test_db/")  # Thay ƒë·ªïi URL theo backend c·ªßa b·∫°n

        if response.status_code == 200:
            st.success(f"‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu th√†nh c√¥ng cho {selected_user}")
            # C√≥ th·ªÉ l∆∞u response data v√†o session state n·∫øu c·∫ßn
            st.session_state['api_response'] = response.json()
        else:
            st.error(f"‚ùå L·ªói khi g·ªçi API: {response.status_code}")
    except requests.exceptions.RequestException as e:
        st.error(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn backend: {str(e)}")


@st.cache_data
def load_transactions():
    return pd.DataFrame()


df = load_transactions()

# Ki·ªÉm tra n·∫øu c√≥ d·ªØ li·ªáu
if not df.empty:
    # B·ªô l·ªçc
    with st.expander("üîç L·ªçc giao d·ªãch"):
        col1, col2 = st.columns(2)
        with col1:
            from_date = st.date_input("T·ª´ ng√†y", datetime.now() - timedelta(days=7))
        with col2:
            to_date = st.date_input("ƒê·∫øn ng√†y", datetime.now())

        filtered_df = df[(df["Ng√†y"].dt.date >= from_date) & (df["Ng√†y"].dt.date <= to_date)]

    # Hi·ªÉn th·ªã b·∫£ng
    st.dataframe(
        filtered_df.sort_values(by="Ng√†y", ascending=False),
        use_container_width=True,
        column_config={
            "S·ªë ti·ªÅn": st.column_config.NumberColumn(format="‚Ç´{:,.0f}"),
            "Ng√†y": st.column_config.DateColumn(format="DD-MM-YYYY"),
        },
        hide_index=True,
    )

    # T·ªïng k·∫øt
    total_in = filtered_df[filtered_df["S·ªë ti·ªÅn"] > 0]["S·ªë ti·ªÅn"].sum()
    total_out = filtered_df[filtered_df["S·ªë ti·ªÅn"] < 0]["S·ªë ti·ªÅn"].sum()

    col3, col4 = st.columns(2)
    with col3:
        st.success(f"üí∏ T·ªïng ti·ªÅn v√†o: ‚Ç´{total_in:,.0f}")
    with col4:
        st.error(f"üí≥ T·ªïng chi ti√™u: ‚Ç´{abs(total_out):,.0f}")
else:
    st.info("üìä Ch∆∞a c√≥ d·ªØ li·ªáu giao d·ªãch ƒë·ªÉ hi·ªÉn th·ªã.")

st.title("ƒê·ªÅ Xu·∫•t S·∫£n Ph·∫©m")
st.markdown("Ph√¢n t√≠ch chi ti√™u v√† ƒë·ªÅ xu·∫•t s·∫£n ph·∫©m ph√π h·ª£p v·ªõi b·∫°n.")


# T·∫°o DataFrame tr·ªëng cho notifications
@st.cache_data
def load_notifications():
    return pd.DataFrame(columns=[
        "Nh√≥m Ph√¢n C·ª•m",
        "ƒê·ªÅ Xu·∫•t S·∫£n Ph·∫©m",
        "L√Ω Do ƒê·ªÅ Xu·∫•t"
    ])


notifications_df = load_notifications()

# Hi·ªÉn th·ªã b·∫£ng th√¥ng b√°o
if not notifications_df.empty:
    st.dataframe(
        notifications_df,
        use_container_width=True,
        column_config={
            "Nh√≥m Ph√¢n C·ª•m": st.column_config.TextColumn("Nh√≥m Ph√¢n C·ª•m", width="medium"),
            "ƒê·ªÅ Xu·∫•t S·∫£n Ph·∫©m": st.column_config.TextColumn("ƒê·ªÅ Xu·∫•t S·∫£n Ph·∫©m", width="medium"),
            "L√Ω Do ƒê·ªÅ Xu·∫•t": st.column_config.TextColumn("L√Ω Do ƒê·ªÅ Xu·∫•t", width="large"),
        },
        hide_index=True,
    )
else:
    # Hi·ªÉn th·ªã b·∫£ng tr·ªëng ƒë·ªÉ minh h·ªça c·∫•u tr√∫c
    st.markdown("**C·∫•u tr√∫c b·∫£ng th√¥ng b√°o:**")
    sample_df = pd.DataFrame({
        "Nh√≥m Ph√¢n C·ª•m": [""],
        "ƒê·ªÅ Xu·∫•t S·∫£n Ph·∫©m": [""],
        "L√Ω Do ƒê·ªÅ Xu·∫•t": [""]
    })
    st.dataframe(
        sample_df,
        use_container_width=True,
        column_config={
            "Nh√≥m Ph√¢n C·ª•m": st.column_config.TextColumn("Nh√≥m Ph√¢n C·ª•m", width="medium"),
            "ƒê·ªÅ Xu·∫•t S·∫£n Ph·∫©m": st.column_config.TextColumn("ƒê·ªÅ Xu·∫•t S·∫£n Ph·∫©m", width="medium"),
            "L√Ω Do ƒê·ªÅ Xu·∫•t": st.column_config.TextColumn("L√Ω Do ƒê·ªÅ Xu·∫•t", width="large"),
        },
        hide_index=True,
    )